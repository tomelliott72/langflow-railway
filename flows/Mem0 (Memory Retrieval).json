{
  "access_type": "PRIVATE",
  "data": {
    "edges": [
      {
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-f5Fr5",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "search_query",
            "id": "mem0_chat_memory-pyWRo",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-f5Fr5{œdataTypeœ:œTextInputœ,œidœ:œTextInput-f5Fr5œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-mem0_chat_memory-pyWRo{œfieldNameœ:œsearch_queryœ,œidœ:œmem0_chat_memory-pyWRoœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "source": "TextInput-f5Fr5",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-f5Fr5œ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "mem0_chat_memory-pyWRo",
        "targetHandle": "{œfieldNameœ:œsearch_queryœ,œidœ:œmem0_chat_memory-pyWRoœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "mem0_chat_memory-pyWRo",
          "node": {
            "base_classes": [
              "Data",
              "Memory"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Retrieves and stores chat messages using Mem0 memory storage.",
            "display_name": "Mem0 Chat Memory",
            "documentation": "",
            "edited": false,
            "field_order": [
              "mem0_config",
              "ingest_message",
              "existing_memory",
              "user_id",
              "search_query",
              "mem0_api_key",
              "metadata",
              "openai_api_key"
            ],
            "frozen": false,
            "icon": "Mem0",
            "legacy": false,
            "lf_version": "1.3.2",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Mem0 Memory",
                "method": "ingest_data",
                "name": "memory",
                "selected": "Memory",
                "tool_mode": true,
                "types": [
                  "Memory"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Search Results",
                "method": "build_search_results",
                "name": "search_results",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import logging\nimport os\n\nfrom mem0 import Memory, MemoryClient\n\nfrom langflow.base.memory.model import LCChatMemoryComponent\nfrom langflow.inputs import (\n    DictInput,\n    HandleInput,\n    MessageTextInput,\n    NestedDictInput,\n    SecretStrInput,\n)\nfrom langflow.io import Output\nfrom langflow.schema import Data\n\nlogger = logging.getLogger(__name__)\n\n\nclass Mem0MemoryComponent(LCChatMemoryComponent):\n    display_name = \"Mem0 Chat Memory\"\n    description = \"Retrieves and stores chat messages using Mem0 memory storage.\"\n    name = \"mem0_chat_memory\"\n    icon: str = \"Mem0\"\n    inputs = [\n        NestedDictInput(\n            name=\"mem0_config\",\n            display_name=\"Mem0 Configuration\",\n            info=\"\"\"Configuration dictionary for initializing Mem0 memory instance.\n                    Example:\n                    {\n                        \"graph_store\": {\n                            \"provider\": \"neo4j\",\n                            \"config\": {\n                                \"url\": \"neo4j+s://your-neo4j-url\",\n                                \"username\": \"neo4j\",\n                                \"password\": \"your-password\"\n                            }\n                        },\n                        \"version\": \"v1.1\"\n                    }\"\"\",\n            input_types=[\"Data\"],\n        ),\n        MessageTextInput(\n            name=\"ingest_message\",\n            display_name=\"Message to Ingest\",\n            info=\"The message content to be ingested into Mem0 memory.\",\n        ),\n        HandleInput(\n            name=\"existing_memory\",\n            display_name=\"Existing Memory Instance\",\n            input_types=[\"Memory\"],\n            info=\"Optional existing Mem0 memory instance. If not provided, a new instance will be created.\",\n        ),\n        MessageTextInput(\n            name=\"user_id\", display_name=\"User ID\", info=\"Identifier for the user associated with the messages.\"\n        ),\n        MessageTextInput(\n            name=\"search_query\", display_name=\"Search Query\", info=\"Input text for searching related memories in Mem0.\"\n        ),\n        SecretStrInput(\n            name=\"mem0_api_key\",\n            display_name=\"Mem0 API Key\",\n            info=\"API key for Mem0 platform. Leave empty to use the local version.\",\n        ),\n        DictInput(\n            name=\"metadata\",\n            display_name=\"Metadata\",\n            info=\"Additional metadata to associate with the ingested message.\",\n            advanced=True,\n        ),\n        SecretStrInput(\n            name=\"openai_api_key\",\n            display_name=\"OpenAI API Key\",\n            required=False,\n            info=\"API key for OpenAI. Required if using OpenAI Embeddings without a provided configuration.\",\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"memory\", display_name=\"Mem0 Memory\", method=\"ingest_data\"),\n        Output(\n            name=\"search_results\",\n            display_name=\"Search Results\",\n            method=\"build_search_results\",\n        ),\n    ]\n\n    def build_mem0(self) -> Memory:\n        \"\"\"Initializes a Mem0 memory instance based on provided configuration and API keys.\"\"\"\n        if self.openai_api_key:\n            os.environ[\"OPENAI_API_KEY\"] = self.openai_api_key\n\n        try:\n            if not self.mem0_api_key:\n                return Memory.from_config(config_dict=dict(self.mem0_config)) if self.mem0_config else Memory()\n            if self.mem0_config:\n                return MemoryClient.from_config(api_key=self.mem0_api_key, config_dict=dict(self.mem0_config))\n            return MemoryClient(api_key=self.mem0_api_key)\n        except ImportError as e:\n            msg = \"Mem0 is not properly installed. Please install it with 'pip install -U mem0ai'.\"\n            raise ImportError(msg) from e\n\n    def ingest_data(self) -> Memory:\n        \"\"\"Ingests a new message into Mem0 memory and returns the updated memory instance.\"\"\"\n        mem0_memory = self.existing_memory or self.build_mem0()\n\n        if not self.ingest_message or not self.user_id:\n            logger.warning(\"Missing 'ingest_message' or 'user_id'; cannot ingest data.\")\n            return mem0_memory\n\n        metadata = self.metadata or {}\n\n        logger.info(\"Ingesting message for user_id: %s\", self.user_id)\n\n        try:\n            mem0_memory.add(self.ingest_message, user_id=self.user_id, metadata=metadata)\n        except Exception:\n            logger.exception(\"Failed to add message to Mem0 memory.\")\n            raise\n\n        return mem0_memory\n\n    def build_search_results(self) -> Data:\n        \"\"\"Searches the Mem0 memory for related messages based on the search query and returns the results.\"\"\"\n        mem0_memory = self.ingest_data()\n        search_query = self.search_query\n        user_id = self.user_id\n\n        logger.info(\"Search query: %s\", search_query)\n\n        try:\n            if search_query:\n                logger.info(\"Performing search with query.\")\n                related_memories = mem0_memory.search(query=search_query, user_id=user_id)\n            else:\n                logger.info(\"Retrieving all memories for user_id: %s\", user_id)\n                related_memories = mem0_memory.get_all(user_id=user_id)\n        except Exception:\n            logger.exception(\"Failed to retrieve related memories from Mem0.\")\n            raise\n\n        logger.info(\"Related memories retrieved: %s\", related_memories)\n        return related_memories\n"
              },
              "existing_memory": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Existing Memory Instance",
                "dynamic": false,
                "info": "Optional existing Mem0 memory instance. If not provided, a new instance will be created.",
                "input_types": [
                  "Memory"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "existing_memory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "ingest_message": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Message to Ingest",
                "dynamic": false,
                "info": "The message content to be ingested into Mem0 memory.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "ingest_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "mem0_api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Mem0 API Key",
                "dynamic": false,
                "info": "API key for Mem0 platform. Leave empty to use the local version.",
                "input_types": [
                  "Message"
                ],
                "load_from_db": true,
                "name": "mem0_api_key",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "Mem0 API Key"
              },
              "mem0_config": {
                "_input_type": "NestedDictInput",
                "advanced": false,
                "display_name": "Mem0 Configuration",
                "dynamic": false,
                "info": "Configuration dictionary for initializing Mem0 memory instance.\n                    Example:\n                    {\n                        \"graph_store\": {\n                            \"provider\": \"neo4j\",\n                            \"config\": {\n                                \"url\": \"neo4j+s://your-neo4j-url\",\n                                \"username\": \"neo4j\",\n                                \"password\": \"your-password\"\n                            }\n                        },\n                        \"version\": \"v1.1\"\n                    }",
                "input_types": [
                  "Data"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "mem0_config",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "NestedDict",
                "value": {}
              },
              "metadata": {
                "_input_type": "DictInput",
                "advanced": true,
                "display_name": "Metadata",
                "dynamic": false,
                "info": "Additional metadata to associate with the ingested message.",
                "list": false,
                "list_add_label": "Add More",
                "name": "metadata",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "dict",
                "value": {}
              },
              "openai_api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "API key for OpenAI. Required if using OpenAI Embeddings without a provided configuration.",
                "input_types": [
                  "Message"
                ],
                "load_from_db": true,
                "name": "openai_api_key",
                "password": true,
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "OpenAI API Key"
              },
              "search_query": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Search Query",
                "dynamic": false,
                "info": "Input text for searching related memories in Mem0.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "search_query",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "user_id": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "User ID",
                "dynamic": false,
                "info": "Identifier for the user associated with the messages.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "user_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "mem0_chat_memory"
        },
        "dragging": false,
        "id": "mem0_chat_memory-pyWRo",
        "measured": {
          "height": 753,
          "width": 320
        },
        "position": {
          "x": 609.487724553257,
          "y": 231.66961278145558
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-f5Fr5",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get text inputs from the Playground.",
            "display_name": "Text Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-f5Fr5",
        "measured": {
          "height": 230,
          "width": 320
        },
        "position": {
          "x": 68.91112807984646,
          "y": 189.7936564375751
        },
        "selected": true,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 173.779464300757,
      "y": 207.92942074919034,
      "zoom": 0.7432839532084627
    }
  },
  "description": "Experiment to test Mem0",
  "endpoint_name": null,
  "folder_id": "a7ab8906-27cb-4255-b45e-a7618dd4f136",
  "fs_path": null,
  "gradient": null,
  "icon": null,
  "icon_bg_color": null,
  "id": "51989398-077f-4f7c-aa3e-52fd8111829e",
  "is_component": false,
  "locked": false,
  "name": "Mem0 (Memory Retrieval)",
  "tags": [],
  "updated_at": "2025-04-14T18:41:09+00:00",
  "user_id": "cd7c608d-b866-4a4d-a6a2-0e21815df645",
  "webhook": false
}