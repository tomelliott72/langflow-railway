{"id":"5066a9b2-5f68-4ecf-89d6-4ceaafc21353","name":"SQL Query Executor","data":{"edges":[],"nodes":[{"data":{"type":"DatabaseQueryComponent","node":{"template":{"_type":"Component","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow.custom import Component\nfrom langflow.inputs import StrInput, MultilineInput\nfrom langflow.template import Output, Input\nfrom langflow.schema.message import Message\nimport psycopg2\n\nclass DatabaseQueryComponent(Component):\n    display_name = \"Database Query Component\"\n    description = \"A component to execute a SQL query on a database and return the results in Markdown format.\"\n\n    inputs = [\n        StrInput(\n            name=\"db_connection_string\",\n            display_name=\"Database Connection String\",\n            info=\"Enter the database connection string.\"\n        ),\n        MultilineInput(\n            name=\"query_string\",\n            display_name=\"Query String\",\n            info=\"Enter the SQL query to execute.\"\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Query Results\", name=\"query_results\", method=\"execute_query\"),\n        Output(display_name=\"Raw Query\", name=\"raw_query\", method=\"get_raw_query\"),\n    ]\n\n    def execute_query(self) -> Message:\n        \"\"\"\n        Connect to the database, execute the query, and return the results as Markdown.\n\n        Returns:\n            Message: A Message object containing the query results in Markdown or \"No data found\" on error.\n        \"\"\"\n        try:\n            # Use a context manager for the connection\n            with psycopg2.connect(self.db_connection_string) as connection:\n                with connection.cursor() as cursor:\n                    # Execute the query\n                    cursor.execute(self.query_string)\n                    results = cursor.fetchall()\n                    column_names = [desc[0] for desc in cursor.description]\n\n                    # Check if results are empty\n                    if not results:\n                        return Message(text=\"No data found\")\n\n                    # Format results as a Markdown table\n                    markdown_table = self._format_as_markdown(column_names, results)\n                    return Message(text=markdown_table)\n\n        except Exception:\n            # Return a friendly message on error\n            return Message(text=\"No data found\")\n\n    def get_raw_query(self) -> Message:\n        \"\"\"\n        Return the raw query string provided by the user.\n\n        Returns:\n            Message: A Message object containing the raw query string.\n        \"\"\"\n        try:\n            return Message(text=f\"```sql\\n{self.query_string}\")\n        except AttributeError:\n            return Message(text=\"No query string provided\")\n\n    def _format_as_markdown(self, columns, rows) -> str:\n        \"\"\"\n        Format query results as a Markdown table.\n\n        Args:\n            columns (list): Column names of the query result.\n            rows (list): Rows of the query result.\n\n        Returns:\n            str: A Markdown-formatted table.\n        \"\"\"\n        # Create header row\n        header = \"| \" + \" | \".join(columns) + \" |\"\n        separator = \"| \" + \" | \".join([\"---\"] * len(columns)) + \" |\"\n        # Create data rows\n        data_rows = \"\\n\".join([\"| \" + \" | \".join(map(str, row)) + \" |\" for row in rows])\n        # Combine into a Markdown table\n        return f\"{header}\\n{separator}\\n{data_rows}\"\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"db_connection_string":{"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"db_connection_string","value":"postgresql://root:root@172.31.101.23:5433/orchestra","display_name":"Database Connection String","advanced":false,"dynamic":false,"info":"Enter the database connection string.","title_case":false,"type":"str","_input_type":"StrInput"},"query_string":{"trace_as_input":true,"multiline":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"name":"query_string","value":"","display_name":"Query String","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Enter the SQL query to execute.","title_case":false,"type":"str","_input_type":"MultilineInput"}},"description":"A component to execute a SQL query on a database and return the results in Markdown format.","base_classes":["Message"],"display_name":"SQL Query Executor","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"query_results","display_name":"Query Results","method":"execute_query","value":"__UNDEFINED__","cache":true},{"types":["Message"],"selected":"Message","name":"raw_query","display_name":"Raw Query","method":"get_raw_query","value":"__UNDEFINED__","cache":true}],"field_order":["db_connection_string","query_string"],"beta":false,"edited":true,"metadata":{},"lf_version":"1.0.19.post2","official":false},"id":"DatabaseQueryComponent-wAvGk"},"id":"DatabaseQueryComponent-wAvGk","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"is_component":true}